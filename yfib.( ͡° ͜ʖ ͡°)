[0=Lf.Lx.x]
[1=Lf.Lx.f x]
[++=Ln.Lf.Lx.f(n f x)]
[+=Lm.Ln. m ++ n]
[--=Ln.Lf.Lx.n (Lg.Lh.h (g f))(Lu.x)(Lu.u)]
[true=Lleft.Lright.left]
[false=Lleft.Lright.right]
[0?=Ln.n (Lx.false) true]
[if=Lbool.Lthen.Lelse. bool then else]
[Y=Lg.(Lx.g (x x))(Lx.g (x x))]
(*[badfib=Y (Lf.Ln. (if (0? n)
                      1
                      (+ (fib (-- n)) (fib (-- (-- n))))))]*)
(*tail recursive because naive way was way too slow (and also crashed my laptop)*)
[fib=Y (Lf.Lval.Lprev.Ln. (if (0? n)
                            prev
                            (f (+ val prev) val (-- n)))) 1 0]
fib (++ (++ (++ (++ (++ 0))))) (*also an optimization. even optimized like this, this is a very slow way to do this. much slower than the simple iterative fib*)
